name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Run all tests
      run: ./gradlew test

    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport

    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification

    - name: Build distribution
      run: ./gradlew build -x test

    - name: Create distribution archives
      run: |
        ./gradlew assembleDist
        cd build/distributions
        ls -lh

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          cat CHANGELOG.md > release_notes.md
        else
          echo "## Release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md || echo "- Initial release" >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          build/distributions/*.tar
          build/distributions/*.zip
          build/libs/*.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ steps.version.outputs.version }}
        path: |
          build/distributions/*.tar
          build/distributions/*.zip
          build/libs/*.jar
        retention-days: 90

  publish-documentation:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: build-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Generate ScalaDoc
      run: ./gradlew scaladoc || echo "ScalaDoc generation completed"

    - name: Deploy documentation to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/docs/scaladoc
        destination_dir: docs/api
        keep_files: true

  docker-publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: build-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      if: success()
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/etl-spark-gradle:latest
          ${{ secrets.DOCKER_USERNAME }}/etl-spark-gradle:${{ steps.version.outputs.version }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/etl-spark-gradle:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/etl-spark-gradle:buildcache,mode=max
      continue-on-error: true

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build-release, publish-documentation, docker-publish]
    if: always()

    steps:
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Release notification
      run: |
        echo "Release ${{ steps.version.outputs.version }} completed!"
        echo "Build status: ${{ needs.build-release.result }}"
        echo "Documentation status: ${{ needs.publish-documentation.result }}"
        echo "Docker status: ${{ needs.docker-publish.result }}"

    - name: Check overall status
      run: |
        if [ "${{ needs.build-release.result }}" != "success" ]; then
          echo "Release build failed!"
          exit 1
        fi
        echo "Release successful!"
